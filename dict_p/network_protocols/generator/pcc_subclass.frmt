class MOTHER_FIELD_CAMELCASE:
    def __init__(self, //FIELDS_SIMPLE, ////FIELDS_COMPLEX, //):
        //self.FIELDS_SIMPLE = FIELDS_SIMPLE
        ////self.FIELDS_COMPLEX = FIELDS_COMPLEX
        //
    @classmethod
    def from_raw(cls, data):
        # initialize
        //FIELDS_SIMPLE = None
        ////FIELDS_COMPLEX = cls.FIELDS_COMPLEX_CAMELCASE(/{None, }/*LEN_FIELDS_COMPLEX)
        //
        # get values for fields the packet has
        # TODO: extract values from data

        return cls(//FIELDS_SIMPLE, ////FIELDS_COMPLEX, //)

    @classmethod
    def from_dict(cls, cond):
        # get simple fields user can access
        //FIELDS_SIMPLE = cond.get('FIELDS_SIMPLE')
        //
        # initialise complex/flag fields the user can access
        //FIELDS_COMPLEX = {}
        //
        # collect complex fields into dictionaries
        for field in cond:
            pass
            //if field.startswith('FIELDS_COMPLEX.'):
                FIELDS_COMPLEX[field.split('.', 1)[1]] = cond[field]
            //
        # and initialise them
        //FIELDS_COMPLEX = cls.FIELDS_COMPLEX_CAMELCASE.from_dict(FIELDS_COMPLEX)
        //
        # re-initialise additional/standard stuff users don't have access to
        # TODO: fill this if needed

        return cls(//FIELDS_SIMPLE, ////FIELDS_COMPLEX, //)

